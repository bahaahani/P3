
Hereâ€™s a detailed prompt for a smart, detail-oriented software engineer to design a NestJS app from scratch tailored for the project requirements:

Project Requirements Overview:

We are building a NestJS-based web application for DANAT, focusing on features such as user authentication, course management, social media integration, and a user-friendly UI/UX. The project will involve a RESTful API for handling the backend logic and data management, integrated with Angular on the frontend.

Tasks Overview:

Project Initialization:

Set up a new NestJS project using the Nest CLI.
Organize the project structure according to best practices (e.g., feature modules, shared modules).
Packages & Dependencies:

Install and configure the following essential packages:
@nestjs/core, @nestjs/common, @nestjs/platform-express: Core framework packages.
TypeORM: For database interaction (choose between MySQL, PostgreSQL).
class-validator, class-transformer: For validation and transformation of DTOs.
Passport, @nestjs/passport, @nestjs/jwt: For authentication and JWT token management.
Swagger: For API documentation.
Multer: For handling file uploads.
bcryptjs: For password hashing.
Axios: For HTTP requests (e.g., social media integration).
dotenv: For environment variables.
Rate limiting, Throttling: For security purposes.
Database Setup:

Choose between MySQL or PostgreSQL.
Design the schema based on the requirements:
Users table: For authentication and role management.
Courses table: For course information management.
Enrollments table: To track student course enrollment.
Use TypeORM entities for schema definition and migration management.
Authentication & Authorization:

Implement JWT-based authentication.
Role-based access control (Admin, User) using guards and decorators.
Password hashing and secure storage using bcrypt.
Course Management Module:

Implement CRUD operations for course management.
Enable file uploads for course materials using Multer.
Add filtering and search functionalities.
Social Media Integration:

Set up API calls to social media platforms using Axios.
Implement OAuth2 if necessary for deeper integrations.
Validation & Error Handling:

Use class-validator for request payload validation.
Implement global error handling for consistent API responses.
Documentation & Testing:

Use Swagger to generate API documentation.
Write unit and e2e tests using Jest.
Deployment & Environment Setup:

Set up Docker for containerization.
Use dotenv for environment-specific configurations.
Prepare for deployment on platforms like Vercel.
Expected Deliverables:

Fully functioning backend with API documentation.
Clean, maintainable code with appropriate comments.
Comprehensive test coverage and successful CI/CD pipeline setup.
